#include <SPI.h>
#include <WiFiNINA.h>
#include <Wire.h>
#include <Arduino.h>

char ssid[] = "TP-LINK_Ceylon";        // your network SSID (name)
char pass[] = "Home1234";               // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;                 // your network key index number (needed only for WEP)
char thingSpeakAPIKey[] = "0ZKKTR41PUCANTQC"; // Your ThingSpeak API Key
char thingSpeakServer[] = "api.thingspeak.com"; // ThingSpeak API server
bool sendtmp = false;
int status = WL_IDLE_STATUS;
WiFiServer server(80);
WiFiClient thingSpeakClient; // Declare ThingSpeak client

void setup() {
  Wire.begin(); // Initialize I2C communication
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(LEDR, OUTPUT);
  pinMode(LEDG, OUTPUT);
  pinMode(LEDB, OUTPUT);
  Serial.begin(9600);      // initialize serial communication

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    // Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    // Serial.println("Please upgrade the firmware");
  }

  // attempt to connect to WiFi network:
  while (status != WL_CONNECTED) {
    // Serial.print("Attempting to connect to Network named: ");
    //  Serial.println(ssid);                   // print the network name (SSID);

    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
    // wait 10 seconds for connection:
    delay(10000);
  }
  server.begin();                           // start the web server on port 80
    printWifiStatus();                        // you're connected now, so print out the status
}

void loop() {
  WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
         Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("<style>");
            client.print(".container {margin: 0 auto; text-align: center; margin-top: 100px;}");
            client.print("button {color: white; width: 100px; height: 100px;");
            client.print("border-radius: 50%; margin: 20px; border: none; font-size: 20px; outline: none; transition: all 0.2s;}");
            client.print(".red{background-color: rgb(196, 39, 39);}");
            client.print(".green{background-color: rgb(39, 121, 39);}");
            client.print(".blue {background-color: rgb(5, 87, 180);}");
            client.print(".off{background-color: grey;}");
            client.print("button:hover{cursor: pointer; opacity: 0.7;}");
            client.print("</style>");
            client.print("<div class='container'>");
            client.print("<button class='red' type='submit' onmousedown='location.href=\"/LON\"'>LOGO ON</button>");
            client.print("<button class='off' type='submit' onmousedown='location.href=\"/LOFF\"'>LOGO OFF</button><br>");
            client.print("<button class='green' type='submit' onmousedown='location.href=\"/L1\"'>LEVEL 1</button>");
            client.print("<button class='off' type='submit' onmousedown='location.href=\"/L2\"'>LEVEL 2</button><br>");
            client.print("<button class='blue' type='submit' onmousedown='location.href=\"/L3\"'>LEVEL 3</button>");
            client.print("<button class='off' type='submit' onmousedown='location.href=\"/LC\"'>CLEAR</button>");
            client.print("<button class='green' type='submit' onmousedown='location.href=\"/TMP\"'>TEMP</button>");
            client.print("<button class='blue' type='submit' onmousedown='location.href=\"/SLP\"'>SLEEP</button>");
            client.print("</div>");

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        // Check to see if the client request was /X
        if (currentLine.endsWith("GET /LON")) {
          digitalWrite(LEDR, HIGH);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB1";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /LOFF")) {
          digitalWrite(LEDR, LOW);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB2";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /L1")) {
          digitalWrite(LEDG, HIGH);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB3";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /L2")) {
          digitalWrite(LEDG, LOW);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB5";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /L3")) {
          digitalWrite(LEDB, HIGH);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB7";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /LC")) {
          digitalWrite(LEDB, LOW);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB8";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /SLP")) {
          digitalWrite(LEDB, LOW);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB9";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
        }
        if (currentLine.endsWith("GET /TMP")) {
          digitalWrite(LEDB, LOW);
          const char* addressData = "0xABC1"; // Replace with the address data you want to send
          const char* irData = "0xBBBBBB6";     // Replace with the IR data you want to send
          sendmodulator(addressData, irData);
          sendtmp = true; // Set sendtmp to true to indicate that you need to send temperature data
        }
      }
    }
    // close the connection:
    client.stop();
    //  Serial.println("client disconnected");
  }

  if (sendtmp) {
    float temp = 55; // Replace with your temperature reading code

    // Create the POST data string
    String postStr = "api_key=";
    postStr += thingSpeakAPIKey;
    postStr += "&field1=";
    postStr += String(temp);

    if (thingSpeakClient.connect(thingSpeakServer, 80)) {
      thingSpeakClient.println("POST /update HTTP/1.1");
      thingSpeakClient.println("Host: api.thingspeak.com");
      thingSpeakClient.println("Connection: close");
      thingSpeakClient.println("Content-Type: application/x-www-form-urlencoded");
      thingSpeakClient.print("Content-Length: ");
      thingSpeakClient.println(postStr.length());
      thingSpeakClient.println();
      thingSpeakClient.print(postStr);
      thingSpeakClient.println();

      Serial.println("Sending data to ThingSpeak...");

      while (thingSpeakClient.connected()) {
        if (thingSpeakClient.available()) {
          char c = thingSpeakClient.read();
          Serial.print(c);
        }
      }

      thingSpeakClient.stop();
      delay(15000); // Wait for a delay between updates
    }
    sendtmp = false; // Reset sendtmp to false after sending data
  }
}

void sendmodulator(const char* addressData, const char* irData)
{
  // Start communication with Arduino slave at address 8
  Wire.beginTransmission(8);

  // Send address data
  Wire.write(addressData, strlen(addressData));

  // Send IR data
  Wire.write(irData, strlen(irData));

  // End transmission
  Wire.endTransmission();
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
   Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
    Serial.print("signal strength (RSSI):");
   Serial.print(rssi);
  Serial.println(" dBm");
  //print where to go in a browser:
   Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}
